#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<stdbool.h>

typedef struct LNode 
{
	int data;
	struct LNode *next;
}LinkNode;

typedef struct DNode
{
	int data;
	struct DNode *prior;
	struct DNode *next;
	int fraq;
}DLinkNode;


void InitList(LinkNode *&L)
{
    L = (LinkNode * )malloc(sizeof(LinkNode));
    L->next=NULL;
}

void InitListD(DLinkNode *&D)
{
    D = (DLinkNode * )malloc(sizeof(DLinkNode));
    D->next=NULL;
}

void CreateList(LinkNode *&L,int a[],int n)
{
	LinkNode *s,*r;
    L = (LinkNode * )malloc(sizeof(LinkNode));
    r=L;
    for(int i=0;i<n;i++)
    {
    	s=(LinkNode * )malloc(sizeof(LinkNode));
    	s->data=a[i];
    	r->next=s;
    	r=s;
    }
    r->next=NULL;
}

void CreateListD(DLinkNode *&D,int a[],int n) 
{
	DLinkNode *s,*r;
	D = (DLinkNode * )malloc(sizeof(DLinkNode));
	r=D;
    for(int i=0;i<n;i++)
    {
    	s=(DLinkNode * )malloc(sizeof(DLinkNode));
    	s->data=a[i];
    	s->fraq= 0 ;
   	    r->next=s;s->prior=r;
    	r=s;
    }
    r->next=NULL;
}

void CreateListC(LinkNode *&L,int a[],int n)
{
	LinkNode *s,*r;
    L = (LinkNode * )malloc(sizeof(LinkNode));
    r=L;
    for(int i=0;i<n;i++)
    {
    	s=(LinkNode * )malloc(sizeof(LinkNode));
    	s->data=a[i];
    	r->next=s;
    	r=s;
    }
    r->next=L;
}

void DestroyList(LinkNode *&L)
{
	LinkNode *pre=L,*p=L->next;
	while(p != NULL)
	{
		free(pre);
		pre=p;
		p=pre->next; 
	}
	free(pre);
} 

void DestroyListD(DLinkNode *&D)
{
	DLinkNode *pre=D,*p=D->next;
	while(p != NULL)
	{
		free(pre);
		pre=p;
		p=pre->next; 
	}
	free(pre);
} 

void DestroyListC(LinkNode *&L)
{
	LinkNode *pre=L,*p=L->next;
	while(p != L)
	{
		free(pre);
		pre=p;
		p=pre->next; 
	}
	free(pre);
} 

void DispList(LinkNode *&L)
{
	LinkNode *p=L->next;
	while(p!=NULL)
	{
		printf("%d",p->data);
		p=p->next;
	}
	printf("\n");
}

void DispListD(DLinkNode *&D)
{
	DLinkNode *p=D->next;
	while(p!=NULL)
	{
		printf("%d",p->data);
		p=p->next;
	}
	printf("\n");
}

void DispListC(LinkNode *&L)
{
	LinkNode *p=L->next;
	while(p!=L)
	{
		printf("%d",p->data);
		p=p->next;
	}
	printf("\n");
}

//Q12 设计一个算法，将一个带头结点的数据域依次为 a1、a2、…、an（n≥3）的单链表的所有结点逆置
void Q12(LinkNode *&L) 
{ 
   LinkNode *p=L->next,*q;  
   L->next=NULL;
   while (p!=NULL)
   {
   	 q=p->next;
   	 p->next=L->next; 
   	 L->next=p;
   	 p=q;
   } 
}

//Q13 设计一个算法求中间位置的元素（即序号为n/2的元素）
int Q13(LinkNode *&L)
{
	LinkNode *p=L->next,*q; 
	q=p; 
	while (p->next!=NULL && p->next->next!=NULL)  
	{ 
	  p=p->next->next;   
	  q=q->next;
    }  
	return q->data; 
} 

//Q14 设计一个算法，在带头结点的非空单链表 L 中第一个最大值结点（最大值结点可能有多个）之前插入一个值为 x 的结点。
void Q14(LinkNode *&L,int x)
{
	 LinkNode *p=L->next,*pre=L;  
	 LinkNode *r,*maxnode=p,*maxpre=L;  
	 while (p!=NULL)  
	 { 
	   if (maxnode->data<p->data)   
	   { 
	      maxnode=p;    
		  maxpre=pre;   
	   }   
       pre=p; 
       p=p->next;  
     }  
	 r=(LinkNode *)malloc(sizeof(LinkNode));  
	 r->data=x;  
	 r->next=maxpre->next;  
	 maxpre->next=r; 
}



//Q15 设计算法，首先按递减次序输出该单链表中各结点的数据元素，然后释放所有结点占用的存储空间
void Descend(LinkNode *&L)
{
	LinkNode *p,*q,*t;  
	p=L->next->next;     
	L->next->next=NULL;  
	while (p!=NULL)  
	{ 
	  q=p->next;   
	  t=L;   
	  while (t->next!=NULL && t->next->data>p->data)    
	    t=t->next; 
	  p->next=t->next;    
	  t->next=p;   
	  p=q; 
	}
}
void Q15(LinkNode *&L)
{
	printf("原链表元素：\n");
	DispList(L);
	
	Descend(L);
	printf("排序后链表元素：\n");
	DispList(L);
	
	DestroyList(L);
}

//Q16 写出一符合要求的 LocateNode 运算的算法。
bool LocateNode(DLinkNode *D,int x)
{ 
    DLinkNode *p=D->next,*pre;  
	while (p!=NULL && p->data!=x)   
      p=p->next; 
	if (p==NULL)
	  return false;
	else
	{
		p->fraq++;        
		pre=p->prior;  
		      
		while (pre!=D && pre->fraq < p->fraq)
		{
		    p->prior=pre->prior;    
			p->prior->next=p;      
			pre->next=p->next;    
			if (pre->next!=NULL)   
			  pre->next->prior=pre;    
			p->next=pre;
			pre->prior=p;  
			  
			pre=p->prior; 
		}
		return true;
	}	
}
	
//Q17 设计一个算法将 ha , hb 两个表合并为带头结点的循环单链表 hc
void Q17(LinkNode *ha, LinkNode *hb, LinkNode *&hc) 
{ 
    LinkNode *p=ha->next;  
    hc=ha;  
    while (p->next!=ha)   
        p=p->next; 
    p->next=hb->next;
    
	while (p->next!=hb)   
	    p=p->next;    
    p->next=hc;   
    free(hb);
}



int main()
{
	//以数组a[5]和数组b[5]为例 
	int a[5]={0,2,8,4,6};
	int b[5]={1,3,0,2,4};
	
	int cmd;
	LinkNode *L; DLinkNode *D; LinkNode *ha,*hb,*hc;
	printf("\t**********************************\n");
	printf("\t********   P73 12-17题   *********\n");
	printf("\t**********************************\n");
	while(1){
	printf("\n输入题号（12-17）：（输入0退出。）\n");
	scanf("%d",&cmd);
	switch(cmd)
	{
		case 12: InitList(L); CreateList(L,a,5);
		         printf("操作前链表元素：\n");DispList(L);
		           Q12(L); 
				 printf("操作后链表元素：\n");DispList(L); 
		         DestroyList(L); break;
        case 13: InitList(L); CreateList(L,a,5);
		         printf("操作前链表元素：\n");DispList(L);
		         printf("中间元素为：\n");
		           printf ("%d\n",Q13(L));
		         DestroyList(L); break;
        case 14: InitList(L); CreateList(L,a,5);
		         printf("操作前链表元素：\n");DispList(L);
		           Q14(L,7);
		         printf("操作后链表元素：\n");DispList(L);
		         DestroyList(L); break;
        case 15: InitList(L); CreateList(L,a,5);
		         printf("操作前链表元素：\n");DispList(L);
		           Q15(L); 
		         break;
        case 16:  InitListD(D); CreateListD(D,a,5);
		         printf("操作前链表元素：\n"); DispListD(D);
       	           LocateNode(D,8);
	             printf("操作后链表元素：\n"); DispListD(D);
	             DestroyListD(D); break;
        case 17: InitList(ha); InitList(hb); InitList(hc);
	             CreateListC(ha,a,5); CreateListC(hb,b,5);
                 printf("操作前ha链表元素：\n"); DispListC(ha);
                 printf("操作前hb链表元素：\n"); DispListC(hb);
                   Q17(ha,hb,hc);
                 printf("操作后hc链表元素：\n");  DispListC(hc);
                 DestroyListC(hc); break;
        case 0:  return 0;
        
        default: printf("错误！\n");
                 break;
                 
	}; 
  }
      return 0;
}
	
